This code is was designed for Ulysses to run on his TI-84 Plus CE calculator.

This is a pattern of counting that Ulee made up very early. The pattern is count 2^n, but after saying the regular 2^n value you swap the digits in the ones and tens places.

Ex. 1,2,4,8,16,61,32,23,64,46,128,182,...


The output displays the number of numbers that have been counted/displayed (on the left) and the value of the nth number counted (on the right)
Ex:
0: val_{0}
1: val_{1}
2: val_{2}
3: val_{3}
.
.
.
n: val_{n}

And terminates when n exceeds some hard-coded value or val_{n} exceeds an input value.


To run:
1. At prompt "Enter max value:" enter the value counting will start at then press Enter.
2. Press Enter when prompted.


Example 1:

Enter max value:
1000

0: 1
1: 2
2: 4
3: 8
4: 16
5: 61
6: 32
7: 23
8: 64
9: 46
10: 128
11: 182
12: 256
13: 265
14: 512
15: 521
16: 1024
Done!
Try again sometime!







NOTES:









Header from the file copied/pasted below:


Name:
    CNT_FLIP.py

Version:
    wessler
    2024 November 10
    update to: 2024 November 8
    changes:
        *fixed error with displaying: "0: 0" which should be "0: 1"

Description:
    *designed to run on Ulee's TI-84 Plus CE
    *counts by 2^n, but first says the number then flips the last 2 digits of the number and says it again.
    *Ulee named this "counting by [I forget--I'll have to look up]" but we're calling it "count by flip-the-end"

Inputs:
    *NOTHING
    *(does have user input values when prompted)

Outputs/does:

        Enter:
            *max_value
        Output:
            0: 0
            1: 2
            2: 4
            .
            .
            .
            i: j

            it ends when either i==max_number_of_numbers (hard-coded) or j>=max_value

Used by:
    *NOTHING--this is standalone code

Uses:
    *NOTHING--this is standalone code

NOTES:

because this is exponential, it gets big very fast.

this pattern (switching the last 2 digits) can be used for other counting methods (other than 2^n), but Ulee did it with 2^n when making it up, so that's what this script is based on. Obviously, the algorithm can easily be repurposed for other counting methods.

